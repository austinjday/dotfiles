# encoding: utf-8
# module sklearn.utils.sparsetools._traversal
# from C:\Users\austi\Anaconda3\lib\site-packages\sklearn\utils\sparsetools\_traversal.cp36-win_amd64.pyd
# by generator 1.145
""" Routines for traversing graphs in compressed sparse format """

# imports
import builtins as __builtins__ # <module 'builtins' (built-in)>
import numpy as np # C:\Users\austi\Anaconda3\lib\site-packages\numpy\__init__.py
from sklearn.utils.sparsetools._graph_tools import reconstruct_path

import numpy as __numpy
import scipy.sparse.compressed as __scipy_sparse_compressed
import scipy.sparse.sputils as __scipy_sparse_sputils


# functions

def breadth_first_order(csgraph, i_start, directed=True, return_predecessors=True): # real signature unknown; restored from __doc__
    """
    breadth_first_order(csgraph, i_start, directed=True, return_predecessors=True)
    
        Return a breadth-first ordering starting with specified node.
    
        Note that a breadth-first order is not unique, but the tree which it
        generates is unique.
    
        .. versionadded:: 0.11.0
    
        Parameters
        ----------
        csgraph : array_like or sparse matrix
            The N x N compressed sparse graph.  The input csgraph will be
            converted to csr format for the calculation.
        i_start : int
            The index of starting node.
        directed : bool, optional
            If True (default), then operate on a directed graph: only
            move from point i to point j along paths csgraph[i, j].
            If False, then find the shortest path on an undirected graph: the
            algorithm can progress from point i to j along csgraph[i, j] or
            csgraph[j, i].
        return_predecessors : bool, optional
            If True (default), then return the predecesor array (see below).
    
        Returns
        -------
        node_array : ndarray, one dimension
            The breadth-first list of nodes, starting with specified node.  The
            length of node_array is the number of nodes reachable from the
            specified node.
        predecessors : ndarray, one dimension
            Returned only if return_predecessors is True.
            The length-N list of predecessors of each node in a breadth-first
            tree.  If node i is in the tree, then its parent is given by
            predecessors[i]. If node i is not in the tree (and for the parent
            node) then predecessors[i] = -9999.
    """
    pass

def breadth_first_tree(csgraph, i_start, directed=True): # real signature unknown; restored from __doc__
    """
    breadth_first_tree(csgraph, i_start, directed=True)
    
        Return the tree generated by a breadth-first search
    
        Note that a breadth-first tree from a specified node is unique.
    
        .. versionadded:: 0.11.0
    
        Parameters
        ----------
        csgraph : array_like or sparse matrix
            The N x N matrix representing the compressed sparse graph.  The input
            csgraph will be converted to csr format for the calculation.
        i_start : int
            The index of starting node.
        directed : bool, optional
            If True (default), then operate on a directed graph: only
            move from point i to point j along paths csgraph[i, j].
            If False, then find the shortest path on an undirected graph: the
            algorithm can progress from point i to j along csgraph[i, j] or
            csgraph[j, i].
    
        Returns
        -------
        cstree : csr matrix
            The N x N directed compressed-sparse representation of the breadth-
            first tree drawn from csgraph, starting at the specified node.
    
        Examples
        --------
        The following example shows the computation of a depth-first tree
        over a simple four-component graph, starting at node 0::
    
             input graph          breadth first tree from (0)
    
                 (0)                         (0)
                /   \                       /   \
               3     8                     3     8
              /       \                   /       \
            (3)---5---(1)               (3)       (1)
              \       /                           /
               6     2                           2
                \   /                           /
                 (2)                         (2)
    
        In compressed sparse representation, the solution looks like this:
    
        >>> from scipy.sparse import csr_matrix
        >>> from scipy.sparse.csgraph import breadth_first_tree
        >>> X = csr_matrix([[0, 8, 0, 3],
        ...                 [0, 0, 2, 5],
        ...                 [0, 0, 0, 6],
        ...                 [0, 0, 0, 0]])
        >>> Tcsr = breadth_first_tree(X, 0, directed=False)
        >>> Tcsr.toarray().astype(int)
        array([[0, 8, 0, 3],
               [0, 0, 2, 0],
               [0, 0, 0, 0],
               [0, 0, 0, 0]])
    
        Note that the resulting graph is a Directed Acyclic Graph which spans
        the graph.  A breadth-first tree from a given node is unique.
    """
    pass

def connected_components(csgraph, directed=True, connection='weak', return_labels=True): # real signature unknown; restored from __doc__
    """
    connected_components(csgraph, directed=True, connection='weak',
                             return_labels=True)
    
        Analyze the connected components of a sparse graph
    
        .. versionadded:: 0.11.0
    
        Parameters
        ----------
        csgraph : array_like or sparse matrix
            The N x N matrix representing the compressed sparse graph.  The input
            csgraph will be converted to csr format for the calculation.
        directed : bool, optional
            If True (default), then operate on a directed graph: only
            move from point i to point j along paths csgraph[i, j].
            If False, then find the shortest path on an undirected graph: the
            algorithm can progress from point i to j along csgraph[i, j] or
            csgraph[j, i].
        connection : str, optional
            ['weak'|'strong'].  For directed graphs, the type of connection to
            use.  Nodes i and j are strongly connected if a path exists both
            from i to j and from j to i.  Nodes i and j are weakly connected if
            only one of these paths exists.  If directed == False, this keyword
            is not referenced.
        return_labels : str, optional
            If True (default), then return the labels for each of the connected
            components.
    
        Returns
        -------
        n_components: int
            The number of connected components.
        labels: ndarray
            The length-N array of labels of the connected components.
    """
    pass

def depth_first_order(csgraph, i_start, directed=True, return_predecessors=True): # real signature unknown; restored from __doc__
    """
    depth_first_order(csgraph, i_start, directed=True, return_predecessors=True)
    
        Return a depth-first ordering starting with specified node.
    
        Note that a depth-first order is not unique.  Furthermore, for graphs
        with cycles, the tree generated by a depth-first search is not
        unique either.
    
        .. versionadded:: 0.11.0
    
        Parameters
        ----------
        csgraph : array_like or sparse matrix
            The N x N compressed sparse graph.  The input csgraph will be
            converted to csr format for the calculation.
        i_start : int
            The index of starting node.
        directed : bool, optional
            If True (default), then operate on a directed graph: only
            move from point i to point j along paths csgraph[i, j].
            If False, then find the shortest path on an undirected graph: the
            algorithm can progress from point i to j along csgraph[i, j] or
            csgraph[j, i].
        return_predecessors : bool, optional
            If True (default), then return the predecesor array (see below).
    
        Returns
        -------
        node_array : ndarray, one dimension
            The breadth-first list of nodes, starting with specified node.  The
            length of node_array is the number of nodes reachable from the
            specified node.
        predecessors : ndarray, one dimension
            Returned only if return_predecessors is True.
            The length-N list of predecessors of each node in a breadth-first
            tree.  If node i is in the tree, then its parent is given by
            predecessors[i]. If node i is not in the tree (and for the parent
            node) then predecessors[i] = -9999.
    """
    pass

def depth_first_tree(csgraph, i_start, directed=True): # real signature unknown; restored from __doc__
    """
    depth_first_tree(csgraph, i_start, directed=True)
    
        Return a tree generated by a depth-first search.
    
        Note that a tree generated by a depth-first search is not unique:
        it depends on the order that the children of each node are searched.
    
        .. versionadded:: 0.11.0
    
        Parameters
        ----------
        csgraph : array_like or sparse matrix
            The N x N matrix representing the compressed sparse graph.  The input
            csgraph will be converted to csr format for the calculation.
        i_start : int
            The index of starting node.
        directed : bool, optional
            If True (default), then operate on a directed graph: only
            move from point i to point j along paths csgraph[i, j].
            If False, then find the shortest path on an undirected graph: the
            algorithm can progress from point i to j along csgraph[i, j] or
            csgraph[j, i].
    
        Returns
        -------
        cstree : csr matrix
            The N x N directed compressed-sparse representation of the depth-
            first tree drawn from csgraph, starting at the specified node.
    
        Examples
        --------
        The following example shows the computation of a depth-first tree
        over a simple four-component graph, starting at node 0::
    
             input graph           depth first tree from (0)
    
                 (0)                         (0)
                /   \                           \
               3     8                           8
              /       \                           \
            (3)---5---(1)               (3)       (1)
              \       /                   \       /
               6     2                     6     2
                \   /                       \   /
                 (2)                         (2)
    
        In compressed sparse representation, the solution looks like this:
    
        >>> from scipy.sparse import csr_matrix
        >>> from scipy.sparse.csgraph import depth_first_tree
        >>> X = csr_matrix([[0, 8, 0, 3],
        ...                 [0, 0, 2, 5],
        ...                 [0, 0, 0, 6],
        ...                 [0, 0, 0, 0]])
        >>> Tcsr = depth_first_tree(X, 0, directed=False)
        >>> Tcsr.toarray().astype(int)
        array([[0, 8, 0, 0],
               [0, 0, 2, 0],
               [0, 0, 0, 6],
               [0, 0, 0, 0]])
    
        Note that the resulting graph is a Directed Acyclic Graph which spans
        the graph.  Unlike a breadth-first tree, a depth-first tree of a given
        graph is not unique if the graph contains cycles.  If the above solution
        had begun with the edge connecting nodes 0 and 3, the result would have
        been different.
    """
    pass

def isspmatrix(x): # reliably restored by inspect
    # no doc
    pass

def isspmatrix_csc(x): # reliably restored by inspect
    # no doc
    pass

def isspmatrix_csr(x): # reliably restored by inspect
    # no doc
    pass

def validate_graph(csgraph, directed, dtype="<class 'numpy.float64'>", csr_output=True, dense_output=True, copy_if_dense=False, copy_if_sparse=False, null_value_in=0, null_value_out=inf, infinity_null=True, nan_null=True): # reliably restored by inspect
    """ Routine for validation and conversion of csgraph inputs """
    pass

# classes

class csr_matrix(__scipy_sparse_compressed._cs_matrix, __scipy_sparse_sputils.IndexMixin):
    """
    Compressed Sparse Row matrix
    
        This can be instantiated in several ways:
            csr_matrix(D)
                with a dense matrix or rank-2 ndarray D
    
            csr_matrix(S)
                with another sparse matrix S (equivalent to S.tocsr())
    
            csr_matrix((M, N), [dtype])
                to construct an empty matrix with shape (M, N)
                dtype is optional, defaulting to dtype='d'.
    
            csr_matrix((data, (row_ind, col_ind)), [shape=(M, N)])
                where ``data``, ``row_ind`` and ``col_ind`` satisfy the
                relationship ``a[row_ind[k], col_ind[k]] = data[k]``.
    
            csr_matrix((data, indices, indptr), [shape=(M, N)])
                is the standard CSR representation where the column indices for
                row i are stored in ``indices[indptr[i]:indptr[i+1]]`` and their
                corresponding values are stored in ``data[indptr[i]:indptr[i+1]]``.
                If the shape parameter is not supplied, the matrix dimensions
                are inferred from the index arrays.
    
        Attributes
        ----------
        dtype : dtype
            Data type of the matrix
        shape : 2-tuple
            Shape of the matrix
        ndim : int
            Number of dimensions (this is always 2)
        nnz
            Number of nonzero elements
        data
            CSR format data array of the matrix
        indices
            CSR format index array of the matrix
        indptr
            CSR format index pointer array of the matrix
        has_sorted_indices
            Whether indices are sorted
    
        Notes
        -----
    
        Sparse matrices can be used in arithmetic operations: they support
        addition, subtraction, multiplication, division, and matrix power.
    
        Advantages of the CSR format
          - efficient arithmetic operations CSR + CSR, CSR * CSR, etc.
          - efficient row slicing
          - fast matrix vector products
    
        Disadvantages of the CSR format
          - slow column slicing operations (consider CSC)
          - changes to the sparsity structure are expensive (consider LIL or DOK)
    
        Examples
        --------
    
        >>> import numpy as np
        >>> from scipy.sparse import csr_matrix
        >>> csr_matrix((3, 4), dtype=np.int8).toarray()
        array([[0, 0, 0, 0],
               [0, 0, 0, 0],
               [0, 0, 0, 0]], dtype=int8)
    
        >>> row = np.array([0, 0, 1, 2, 2, 2])
        >>> col = np.array([0, 2, 2, 0, 1, 2])
        >>> data = np.array([1, 2, 3, 4, 5, 6])
        >>> csr_matrix((data, (row, col)), shape=(3, 3)).toarray()
        array([[1, 0, 2],
               [0, 0, 3],
               [4, 5, 6]])
    
        >>> indptr = np.array([0, 2, 3, 6])
        >>> indices = np.array([0, 2, 2, 0, 1, 2])
        >>> data = np.array([1, 2, 3, 4, 5, 6])
        >>> csr_matrix((data, indices, indptr), shape=(3, 3)).toarray()
        array([[1, 0, 2],
               [0, 0, 3],
               [4, 5, 6]])
    
        As an example of how to construct a CSR matrix incrementally,
        the following snippet builds a term-document matrix from texts:
    
        >>> docs = [["hello", "world", "hello"], ["goodbye", "cruel", "world"]]
        >>> indptr = [0]
        >>> indices = []
        >>> data = []
        >>> vocabulary = {}
        >>> for d in docs:
        ...     for term in d:
        ...         index = vocabulary.setdefault(term, len(vocabulary))
        ...         indices.append(index)
        ...         data.append(1)
        ...     indptr.append(len(indices))
        ...
        >>> csr_matrix((data, indices, indptr), dtype=int).toarray()
        array([[2, 1, 0, 0],
               [0, 1, 1, 1]])
    """
    def getcol(self, i): # reliably restored by inspect
        """
        Returns a copy of column i of the matrix, as a (m x 1)
                CSR matrix (column vector).
        """
        pass

    def getrow(self, i): # reliably restored by inspect
        """
        Returns a copy of row i of the matrix, as a (1 x n)
                CSR matrix (row vector).
        """
        pass

    def tobsr(self, blocksize=None, copy=True): # reliably restored by inspect
        """
        Convert this matrix to Block Sparse Row format.
        
                With copy=False, the data/indices may be shared between this matrix and
                the resultant bsr_matrix.
        
                When blocksize=(R, C) is provided, it will be used for construction of
                the bsr_matrix.
        """
        pass

    def tocsc(self, copy=False): # reliably restored by inspect
        # no doc
        pass

    def tocsr(self, copy=False): # reliably restored by inspect
        """
        Convert this matrix to Compressed Sparse Row format.
        
                With copy=False, the data/indices may be shared between this matrix and
                the resultant csr_matrix.
        """
        pass

    def tolil(self, copy=False): # reliably restored by inspect
        """
        Convert this matrix to LInked List format.
        
                With copy=False, the data/indices may be shared between this matrix and
                the resultant lil_matrix.
        """
        pass

    def transpose(self, axes=None, copy=False): # reliably restored by inspect
        """
        Reverses the dimensions of the sparse matrix.
        
                Parameters
                ----------
                axes : None, optional
                    This argument is in the signature *solely* for NumPy
                    compatibility reasons. Do not pass in anything except
                    for the default value.
                copy : bool, optional
                    Indicates whether or not attributes of `self` should be
                    copied whenever possible. The degree to which attributes
                    are copied varies depending on the type of sparse matrix
                    being used.
        
                Returns
                -------
                p : `self` with the dimensions reversed.
        
                See Also
                --------
                np.matrix.transpose : NumPy's implementation of 'transpose'
                                      for matrices
        """
        pass

    def _get_row_slice(self, i, cslice): # reliably restored by inspect
        """ Returns a copy of row self[i, cslice] """
        pass

    def _get_submatrix(self, row_slice, col_slice): # reliably restored by inspect
        """ Return a submatrix of this matrix (new matrix is created). """
        pass

    def _swap(self, x): # reliably restored by inspect
        """ swap the members of x if this is a column-oriented matrix """
        pass

    def __getitem__(self, key): # reliably restored by inspect
        # no doc
        pass

    def __init__(self, arg1, shape=None, dtype=None, copy=False): # reliably restored by inspect
        # no doc
        pass

    format = 'csr'


class DTYPE(__numpy.floating, float):
    """ 64-bit floating-point number. Character code 'd'. Python float compatible. """
    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __str__(self, *args, **kwargs): # real signature unknown
        """ Return str(self). """
        pass

    __hash__ = None


class ITYPE(__numpy.signedinteger):
    """ 32-bit integer. Character code 'i'. C int compatible. """
    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __hash__(self, *args, **kwargs): # real signature unknown
        """ Return hash(self). """
        pass

    def __index__(self, *args, **kwargs): # real signature unknown
        """ Return self converted to an integer, if self is suitable for use as an index into a list. """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass


# variables with complex values

__loader__ = None # (!) real value is ''

__spec__ = None # (!) real value is ''

__test__ = {
    'breadth_first_tree (line 99)': '\n    breadth_first_tree(csgraph, i_start, directed=True)\n\n    Return the tree generated by a breadth-first search\n\n    Note that a breadth-first tree from a specified node is unique.\n\n    .. versionadded:: 0.11.0\n\n    Parameters\n    ----------\n    csgraph : array_like or sparse matrix\n        The N x N matrix representing the compressed sparse graph.  The input\n        csgraph will be converted to csr format for the calculation.\n    i_start : int\n        The index of starting node.\n    directed : bool, optional\n        If True (default), then operate on a directed graph: only\n        move from point i to point j along paths csgraph[i, j].\n        If False, then find the shortest path on an undirected graph: the\n        algorithm can progress from point i to j along csgraph[i, j] or\n        csgraph[j, i].\n\n    Returns\n    -------\n    cstree : csr matrix\n        The N x N directed compressed-sparse representation of the breadth-\n        first tree drawn from csgraph, starting at the specified node.\n\n    Examples\n    --------\n    The following example shows the computation of a depth-first tree\n    over a simple four-component graph, starting at node 0::\n\n         input graph          breadth first tree from (0)\n\n             (0)                         (0)\n            /   \\                       /   \\\n           3     8                     3     8\n          /       \\                   /       \\\n        (3)---5---(1)               (3)       (1)\n          \\       /                           /\n           6     2                           2\n            \\   /                           /\n             (2)                         (2)\n\n    In compressed sparse representation, the solution looks like this:\n\n    >>> from scipy.sparse import csr_matrix\n    >>> from scipy.sparse.csgraph import breadth_first_tree\n    >>> X = csr_matrix([[0, 8, 0, 3],\n    ...                 [0, 0, 2, 5],\n    ...                 [0, 0, 0, 6],\n    ...                 [0, 0, 0, 0]])\n    >>> Tcsr = breadth_first_tree(X, 0, directed=False)\n    >>> Tcsr.toarray().astype(int)\n    array([[0, 8, 0, 3],\n           [0, 0, 2, 0],\n           [0, 0, 0, 0],\n           [0, 0, 0, 0]])\n\n    Note that the resulting graph is a Directed Acyclic Graph which spans\n    the graph.  A breadth-first tree from a given node is unique.\n    ',
    'depth_first_tree (line 169)': '\n    depth_first_tree(csgraph, i_start, directed=True)\n\n    Return a tree generated by a depth-first search.\n\n    Note that a tree generated by a depth-first search is not unique:\n    it depends on the order that the children of each node are searched.\n\n    .. versionadded:: 0.11.0\n\n    Parameters\n    ----------\n    csgraph : array_like or sparse matrix\n        The N x N matrix representing the compressed sparse graph.  The input\n        csgraph will be converted to csr format for the calculation.\n    i_start : int\n        The index of starting node.\n    directed : bool, optional\n        If True (default), then operate on a directed graph: only\n        move from point i to point j along paths csgraph[i, j].\n        If False, then find the shortest path on an undirected graph: the\n        algorithm can progress from point i to j along csgraph[i, j] or\n        csgraph[j, i].\n\n    Returns\n    -------\n    cstree : csr matrix\n        The N x N directed compressed-sparse representation of the depth-\n        first tree drawn from csgraph, starting at the specified node.\n\n    Examples\n    --------\n    The following example shows the computation of a depth-first tree\n    over a simple four-component graph, starting at node 0::\n\n         input graph           depth first tree from (0)\n\n             (0)                         (0)\n            /   \\                           \\\n           3     8                           8\n          /       \\                           \\\n        (3)---5---(1)               (3)       (1)\n          \\       /                   \\       /\n           6     2                     6     2\n            \\   /                       \\   /\n             (2)                         (2)\n\n    In compressed sparse representation, the solution looks like this:\n\n    >>> from scipy.sparse import csr_matrix\n    >>> from scipy.sparse.csgraph import depth_first_tree\n    >>> X = csr_matrix([[0, 8, 0, 3],\n    ...                 [0, 0, 2, 5],\n    ...                 [0, 0, 0, 6],\n    ...                 [0, 0, 0, 0]])\n    >>> Tcsr = depth_first_tree(X, 0, directed=False)\n    >>> Tcsr.toarray().astype(int)\n    array([[0, 8, 0, 0],\n           [0, 0, 2, 0],\n           [0, 0, 0, 6],\n           [0, 0, 0, 0]])\n\n    Note that the resulting graph is a Directed Acyclic Graph which spans\n    the graph.  Unlike a breadth-first tree, a depth-first tree of a given\n    graph is not unique if the graph contains cycles.  If the above solution\n    had begun with the edge connecting nodes 0 and 3, the result would have\n    been different.\n    ',
}

